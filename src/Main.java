import java.util.Scanner;
import java.util.Random;
import java.util.List;
import java.util.ArrayList;
// =======================
// === JUALEX & MAIRIN: FLUJO PRINCIPAL DEL JUEGO, EQUIPO PERSONALIZADO Y COMBATE ===
// =======================
public class Main { // Clase principal que contiene el m√©todo main y gestiona el flujo del juego
    static Scanner scanner = new Scanner(System.in); // Scanner para leer entradas del usuario desde la consola
    static Random random = new Random();             // Random para decisiones aleatorias (como el oponente)

    public static void main(String[] args) { // M√©todo principal que inicia el juego
        System.out.println("\nüéÆ BIENVENIDO AL GRAN TORNEO DE BATALLA POK√âMON üéÆ\n");  

        // === NUEVO: EL USUARIO CREA SU EQUIPO PERSONALIZADO ===
        // Lista de Pok√©mon disponibles para elegir
        Pokemon[] disponibles = { // Lista de Pok√©mon disponibles para que el jugador elija
            new PokemonElectrico("Pikachu"),  
            new PokemonFuego("Charizard"),
            new PokemonAgua("Squirtle"),
            new PokemonHada("Sylveon"),
            new PokemonFuego("Braixen"),
            new PokemonAgua("Piplup"),
            new PokemonAgua("Staryu"),
            new PokemonAgua("Psyduck"),
            new PokemonHada("Togepi"),
            new PokemonRoca("Onix"),
            new PokemonRoca("Geodude"),
            new PokemonFuego("Vulpix")
        };

        // El usuario ingresa su nombre
        System.out.print("¬øCu√°l es tu nombre de entrenador? "); // Pide al usuario que ingrese su nombre
        String nombreJugador = scanner.nextLine(); // Lee el nombre ingresado por el usuario

        // El usuario elige 3 Pok√©mon
        Pokemon[] equipoJugador = new Pokemon[3]; // Crea un arreglo para el equipo del jugador con espacio para 3 Pok√©mon
        boolean[] elegido = new boolean[disponibles.length]; // Crea un arreglo para llevar el control de qu√© Pok√©mon ya han sido elegidos (inicialmente todos son false)
        for (int i = 0; i < 3; i++) { // Bucle para que el jugador elija 3 Pok√©mon
            System.out.println("\nElige tu Pok√©mon #" + (i + 1) + ":"); // Muestra el n√∫mero del Pok√©mon que el jugador est√° eligiendo
            for (int j = 0; j < disponibles.length; j++) { // Recorre la lista de Pok√©mon disponibles
                if (!elegido[j]) { // Si el Pok√©mon no ha sido elegido a√∫n
                    System.out.println((j + 1) + ". " + disponibles[j].getNombre() + " (" + disponibles[j].getTipo() + ")"); // Muestra el n√∫mero del Pok√©mon, su nombre y tipo
                }
            }
            int eleccion = -1; // Variable para almacenar la elecci√≥n del jugador, inicializada en -1 para indicar que a√∫n no se ha hecho una elecci√≥n
            while (eleccion < 1 || eleccion > disponibles.length || elegido[eleccion - 1]) { // Bucle para validar la elecci√≥n del jugador
                try {
                    System.out.print("Ingresa el n√∫mero de tu elecci√≥n: "); // Pide al jugador que ingrese el n√∫mero del Pok√©mon que desea elegir
                    eleccion = Integer.parseInt(scanner.nextLine()); // Lee la entrada del jugador y la convierte a un n√∫mero entero
                    if (eleccion < 1 || eleccion > disponibles.length || elegido[eleccion - 1]) { // Verifica si la elecci√≥n es v√°lida: debe estar dentro del rango de Pok√©mon disponibles y no haber sido elegido a√∫n
                        System.out.println("Opci√≥n inv√°lida o ya elegida. Intenta de nuevo."); // Mensaje que indica que la opci√≥n elegida no es v√°lida o ya ha sido elegida
                    }
                } catch (Exception e) {  // Captura cualquier excepci√≥n (como entrada no num√©rica)
                    System.out.println("Entrada inv√°lida. Intenta de nuevo."); // Mensaje que indica que la entrada del jugador no es v√°lida (por ejemplo, si ingresa un texto en lugar de un n√∫mero)
                }
            }
            equipoJugador[i] = disponibles[eleccion - 1]; // Asigna el Pok√©mon elegido al equipo del jugador en la posici√≥n correspondiente
            elegido[eleccion - 1] = true; // Marca el Pok√©mon como elegido para que no pueda ser seleccionado de nuevo
            System.out.println("¬°Has elegido a " + equipoJugador[i].getNombre() + "!"); // Mensaje que indica que el jugador ha elegido un Pok√©mon
        }

        // Equipos predefinidos para el rival
        Pokemon[] equipoAsh = { // Equipo de Ash Ketchum
            new PokemonElectrico("Pikachu"), 
            new PokemonFuego("Charizard"),
            new PokemonAgua("Squirtle")
        };
        Pokemon[] equipoSerena = { // Equipo de Serena
            new PokemonHada("Sylveon"),
            new PokemonFuego("Braixen"),
            new PokemonAgua("Piplup")
        };
        Pokemon[] equipoMisty = { // Equipo de Misty
            new PokemonAgua("Staryu"),
            new PokemonAgua("Psyduck"),
            new PokemonHada("Togepi")
        };
        Pokemon[] equipoBrock = { // Equipo de Brock
            new PokemonRoca("Onix"),
            new PokemonRoca("Geodude"),
            new PokemonFuego("Vulpix")
        };

        // Lista de posibles rivales (sin repetir el equipo del jugador)
        List<Entrenador> posibles = new ArrayList<>(); // Crea una lista para almacenar los entrenadores rivales disponibles
        posibles.add(new Entrenador("Ash", equipoAsh)); // A√±ade a Ash Ketchum con su equipo a la lista de posibles rivales
        posibles.add(new Entrenador("Serena", equipoSerena)); // A√±ade a Serena con su equipo a la lista de posibles rivales
        posibles.add(new Entrenador("Misty", equipoMisty)); // A√±ade a Misty con su equipo a la lista de posibles rivales
        posibles.add(new Entrenador("Brock", equipoBrock)); // A√±ade a Brock con su equipo a la lista de posibles rivales

        // Selecciona rival al azar
        Entrenador enemigo = posibles.get(random.nextInt(posibles.size())); // Selecciona un rival al azar de la lista de posibles rivales

        // Crea el entrenador jugador con su equipo personalizado
        Entrenador jugador = new Entrenador(nombreJugador, equipoJugador); // Crea un nuevo entrenador con el nombre del jugador y su equipo personalizado

        // Muestra el equipo del rival antes de iniciar el combate
        System.out.println("\nTu rival ser√°: " + enemigo.getNombre()); // Mensaje que indica qui√©n es el rival del jugador
        System.out.println("Equipo rival:"); // Muestra el equipo del rival
        for (Pokemon p : enemigo.getEquipo()) { // Recorre el equipo del rival y muestra los nombres y tipos de sus Pok√©mon
            System.out.println("- " + p.getNombre() + " (" + p.getTipo() + ")"); // Muestra el nombre y tipo de cada Pok√©mon del equipo del rival
        }

        // Inicia el combate
        Combate batalla = new Combate(jugador, enemigo); // Crea una nueva instancia de la clase Combate con el jugador y el enemigo
        batalla.iniciar(); // Llama al m√©todo iniciar del combate para comenzar la batalla
    }
}